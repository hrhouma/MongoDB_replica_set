**********************************************
**********************************************
## 1 - docker-composev1.yaml : dans docker-composev1.yaml j'ai corrigé le port à l'interne à 8080 et ajouté un network interne.
	ports:
      		- 3080:8080



**********************************************
**********************************************
## 2- docker-composev2.yaml Je voulais ajouté plusieurs clusters mongodb en utilisant cette documentation 
https://github.com/RWaltersMA/mongo-spark-jupyter/blob/master/docker-compose.yml 

 # MongoDB Replica Set
  mongo1:
    image: "mongo:latest"
    container_name: mongo1
    command: --replSet rs0 --oplogSize 128 --bind_ip 0.0.0.0
    volumes:
      - rs1:/data/db
    networks:
      - localnet
    ports:
      - "27017:27017"
    restart: always

  mongo2:
    image: "mongo:latest"
    container_name: mongo2
    command: --replSet rs0 --oplogSize 128 --bind_ip 0.0.0.0
    volumes:
      - rs2:/data/db
    networks:
      - localnet
    ports:
      - "27018:27017"
    restart: always

  mongo3:
    image: "mongo:latest"
    container_name: mongo3
    command: --replSet rs0 --oplogSize 128 --bind_ip 0.0.0.0
    volumes:
      - rs3:/data/db
    networks:
      - localnet
    ports:
      - "27019:27017"
    restart: always

networks:
    localnet:

malheureusement le mongo-express ne fonctionnait pas 



en utilisant cette référence j'avais simplifié mongo 

https://github.com/mongo-express/mongo-express-docker/issues/67

j'ai utilisé la réponse de  siddharthans2000 commented on Dec 21, 2022 pour faire docker-composev2.yaml et ça fonctionne 

version: '3'
services: 
  mongodb:
    image:  mongo:4.4.17-focal
    container_name: mongodb
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
  mongo-express:
    image: mongo-express:0.54.0
    restart: always
    container_name: mongo-express
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb

REGARDE LE docker-composev2.yaml !!!!!!!!!!!!!



**********************************************
**********************************************
3- Je voulais avoir plusieurs replicasets de mongodb !!

docker-composev3-v4-v5.yaml ne fonctionnent pas 


dockercompose mongo3:  mongo2:
    image: mongo:4.4.17-focal mongo-express:
    image: mongo-express:0.54.0
    restart: always
    container_name: mongo-express
    ports:
        - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
    
      - ME_CONFIG_MONGODB_REPLICA_SET=rs0



solution https://blog.devgenius.io/how-to-deploy-a-mongodb-replicaset-using-docker-compose-a538100db471


**********************************************
**********************************************
4 - J'ai essayé , essayé et essayé , réssayé plusieurs fois ......
J'ai essayé pour 3 heures d'une façon INTENSIVE !!!!!!!!!!!!!!!!!!! 


Finalement, j'ai décidé d'isoler le travail et de le faire à part . J'ai tombé sur ce lien : 

https://blog.devgenius.io/how-to-deploy-a-mongodb-replicaset-using-docker-compose-a538100db471 ( C'est ce que nous allons implémenter !!!!!!!!!!!!! ;) )

encore moins : 
https://medium.com/@JosephOjo/mongodb-replica-set-with-docker-compose-5ab95c02af0d
https://medium.com/workleap/the-only-local-mongodb-replica-set-with-docker-compose-guide-youll-ever-need-2f0b74dd8384

MAIS , voici ce que nous allons implémenter : 
https://blog.devgenius.io/how-to-deploy-a-mongodb-replicaset-using-docker-compose-a538100db471

faire git clone (LIEN À AJOUTEZ)

docker exec -it mongo1 mongo
rs.status()
rs.initiate({_id:"rs0",members:[{_id:0,host:"mongo1:27017"},{_id:1,host:"mongo2:27017"},{_id:2,host:"mongo3:27017"}]})
rs.initiate({_id:"rs0",members:[{_id:0,host:"mongo1:27017"},{_id:1,host:"mongo2:27017"},{_id:2,host:"mongo3:27017"}]})

==> Celui la n'a pas fonctionné : rs.initiate({_id:"rs0",members:[{_id:0,host:"mongo1:27017"},{_id:1,host:"mongo2:27018"},{_id:2,host:"mongo3:27019"}]})



docker restart mongo1 mongo2 mongo3
docker logs mongo1
docker logs mongo2
docker logs mongo3
docker logs mongo-express


https://blog.devgenius.io/how-to-deploy-a-mongodb-replicaset-using-docker-compose-a538100db471





